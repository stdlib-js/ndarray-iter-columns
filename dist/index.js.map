{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar slice = require( '@stdlib/ndarray-base-slice' );\nvar MultiSlice = require( '@stdlib/slice-multi' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Increments stack indices.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {NonNegativeIntegerArray} idx - current indices\n* @returns {NonNegativeIntegerArray} updated indices\n*/\nfunction incrementIndices( ndims, shape, idx ) {\n\tvar i;\n\tvar j;\n\n\t// Search for the first dimension in which we don't have to \"carry the one\"...\n\tfor ( i = ndims-3; i >= 0; i-- ) {\n\t\tj = ( idx[ i ] + 1 ) % shape[ i ];\n\t\tidx[ i ] = j;\n\n\t\t// If the current index value is greater than zero, we can continue iterating within the current sub-array...\n\t\tif ( j > 0 ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn idx;\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each column in a matrix (or stack of matrices).\n*\n* @param {ndarray} x - input value\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least two dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerColumns( x );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ 1, 3 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 2, 4 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 5, 7 ]\n*\n* // ...\n*/\nfunction nditerColumns( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar S0;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t}\n\t}\n\t// Retrieve the input array shape:\n\tshape = x.shape;\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims < 2 ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an ndarray having at least two dimensions.' );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of columns across all stacks of matrices:\n\tN /= shape[ ndims-2 ];\n\tdim = ndims - 1;\n\tS0 = shape[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array for generating slices:\n\tidx = zeros( ndims );\n\n\t// Set the second-to-last element to `null` to indicate that we want a full \"slice\" for the second-to-last dimension:\n\tidx[ ndims-2 ] = null;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar s;\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Create a multi-slice for the current view:\n\t\ts = MultiSlice.apply( null, idx );\n\n\t\t// Update the index array:\n\t\tj = ( idx[ dim ] + 1 ) % S0;\n\t\tidx[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the columns in the current matrix, move on to the next matrix in the stack:\n\t\t\tincrementIndices( ndims, shape, idx );\n\t\t}\n\t\t// Return the next column slice:\n\t\treturn {\n\t\t\t'value': slice( x, s, true, opts.writable ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerColumns( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = nditerColumns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iterates over each column in a matrix (or stack of matrices).\n*\n* @module @stdlib/ndarray-iter-columns\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var nditerColumns = require( '@stdlib/ndarray-iter-columns' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerColumns( x );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ 1, 3 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 2, 4 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 5, 7 ]\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAa,QAAS,iCAAkC,EACxDC,EAAiB,QAAS,yBAA0B,EACpDC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAa,QAAS,qBAAsB,EAC5CC,EAAS,QAAS,uBAAwB,EAc9C,SAASC,EAAkBC,EAAOC,EAAOC,EAAM,CAC9C,IAAIC,EACAC,EAGJ,IAAMD,EAAIH,EAAM,EAAGG,GAAK,IACvBC,GAAMF,EAAKC,CAAE,EAAI,GAAMF,EAAOE,CAAE,EAChCD,EAAKC,CAAE,EAAIC,EAGN,EAAAA,EAAI,IALiBD,IAK1B,CAID,OAAOD,CACR,CA8CA,SAASG,EAAeC,EAAI,CAC3B,IAAIC,EACAN,EACAD,EACAQ,EACAC,EACAC,EACAR,EACAS,EACAC,EACAC,EACAV,EAEJ,GAAK,CAACZ,EAAee,CAAE,EACtB,MAAM,IAAI,UAAWR,EAAQ,oEAAqEQ,CAAE,CAAE,EAKvG,GAHAE,EAAO,CACN,SAAY,EACb,EACK,UAAU,OAAS,EAAI,CAE3B,GADAD,EAAU,UAAW,CAAE,EAClB,CAAClB,EAAekB,CAAQ,EAC5B,MAAM,IAAI,UAAWT,EAAQ,qEAAsES,CAAQ,CAAE,EAE9G,GAAKf,EAAYe,EAAS,UAAW,EAAI,CACxC,GAAK,CAACjB,EAAWiB,EAAQ,QAAS,EACjC,MAAM,IAAI,UAAWT,EAAQ,+DAAgE,WAAYS,EAAQ,QAAS,CAAE,EAE7HC,EAAK,SAAW,CAACD,EAAQ,QAC1B,CACD,CAMA,GAJAN,EAAQK,EAAE,MACVN,EAAQC,EAAM,OAGTD,EAAQ,EACZ,MAAM,IAAI,UAAW,qFAAsF,EAG5G,OAAAa,EAAIlB,EAAOM,CAAM,EACZY,IAAM,IACVH,EAAM,IAGPG,GAAKZ,EAAOD,EAAM,CAAE,EACpBW,EAAMX,EAAQ,EACdY,EAAKX,EAAOU,CAAI,EAGhBR,EAAI,GAGJD,EAAMR,EAAOM,CAAM,EAGnBE,EAAKF,EAAM,CAAE,EAAI,KAGjBS,EAAO,CAAC,EACRrB,EAAaqB,EAAM,OAAQK,CAAK,EAChC1B,EAAaqB,EAAM,SAAUM,CAAI,EAG5BtB,GACJL,EAAaqB,EAAMhB,EAAgBuB,CAAQ,EAErCP,EAQP,SAASK,GAAO,CACf,IAAIG,EACAb,EAEJ,OADAD,GAAK,EACAO,GAAOP,GAAKU,EACT,CACN,KAAQ,EACT,GAGDI,EAAIpB,EAAW,MAAO,KAAMK,CAAI,EAGhCE,GAAMF,EAAKS,CAAI,EAAI,GAAMC,EACzBV,EAAKS,CAAI,EAAIP,EACRA,IAAM,GAEVL,EAAkBC,EAAOC,EAAOC,CAAI,EAG9B,CACN,MAASN,EAAOU,EAAGW,EAAG,GAAMT,EAAK,QAAS,EAC1C,KAAQ,EACT,EACD,CASA,SAASO,EAAKG,EAAQ,CAErB,OADAR,EAAM,GACD,UAAU,OACP,CACN,MAASQ,EACT,KAAQ,EACT,EAEM,CACN,KAAQ,EACT,CACD,CAQA,SAASF,GAAU,CAClB,OAAOX,EAAeC,EAAGE,CAAK,CAC/B,CACD,CAKArB,EAAO,QAAUkB,ICxLjB,IAAIc,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isPlainObject", "isBoolean", "isndarrayLike", "hasOwnProp", "iteratorSymbol", "zeros", "numel", "slice", "MultiSlice", "format", "incrementIndices", "ndims", "shape", "idx", "i", "j", "nditerColumns", "x", "options", "opts", "iter", "FLG", "dim", "S0", "N", "next", "end", "factory", "s", "value", "main"]
}
