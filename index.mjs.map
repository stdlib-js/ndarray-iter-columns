{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport zeros from '@stdlib/array-base-zeros';\nimport numel from '@stdlib/ndarray-base-numel';\nimport slice from '@stdlib/ndarray-base-slice';\nimport MultiSlice from '@stdlib/slice-multi';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Increments stack indices.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {NonNegativeIntegerArray} idx - current indices\n* @returns {NonNegativeIntegerArray} updated indices\n*/\nfunction incrementIndices( ndims, shape, idx ) {\n\tvar i;\n\tvar j;\n\n\t// Search for the first dimension in which we don't have to \"carry the one\"...\n\tfor ( i = ndims-3; i >= 0; i-- ) {\n\t\tj = ( idx[ i ] + 1 ) % shape[ i ];\n\t\tidx[ i ] = j;\n\n\t\t// If the current index value is greater than zero, we can continue iterating within the current sub-array...\n\t\tif ( j > 0 ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn idx;\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each column in a matrix (or stack of matrices).\n*\n* @param {ndarray} x - input value\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have at least two dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerColumns( x );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ 1, 3 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 2, 4 ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ 5, 7 ]\n*\n* // ...\n*/\nfunction nditerColumns( x ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar dim;\n\tvar S0;\n\tvar N;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null4f,Pc', x ) );\n\t}\n\topts = {\n\t\t'writable': false\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'null2V,FD', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2o,GE', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t}\n\t}\n\t// Retrieve the input array shape:\n\tshape = x.shape;\n\tndims = shape.length;\n\n\t// Ensure that the input array has sufficient dimensions...\n\tif ( ndims < 2 ) {\n\t\tthrow new TypeError( 'invalid argument. First argument must be an ndarray having at least two dimensions.' );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of columns across all stacks of matrices:\n\tN /= shape[ ndims-2 ];\n\tdim = ndims - 1;\n\tS0 = shape[ dim ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array for generating slices:\n\tidx = zeros( ndims );\n\n\t// Set the second-to-last element to `null` to indicate that we want a full \"slice\" for the second-to-last dimension:\n\tidx[ ndims-2 ] = null;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar s;\n\t\tvar j;\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Create a multi-slice for the current view:\n\t\ts = MultiSlice.apply( null, idx );\n\n\t\t// Update the index array:\n\t\tj = ( idx[ dim ] + 1 ) % S0;\n\t\tidx[ dim ] = j;\n\t\tif ( j === 0 ) {\n\t\t\t// If we've iterated over all the columns in the current matrix, move on to the next matrix in the stack:\n\t\t\tincrementIndices( ndims, shape, idx );\n\t\t}\n\t\t// Return the next column slice:\n\t\treturn {\n\t\t\t'value': slice( x, s, true, opts.writable ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerColumns( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerColumns;\n"],"names":["incrementIndices","ndims","shape","idx","i","j","nditerColumns","x","options","opts","iter","FLG","dim","S0","N","isndarrayLike","TypeError","format","writable","arguments","length","isPlainObject","hasOwnProp","isBoolean","readonly","numel","zeros","setReadOnly","next","end","iteratorSymbol","factory","s","done","MultiSlice","apply","value","slice"],"mappings":";;6iCA8CA,SAASA,EAAkBC,EAAOC,EAAOC,GACxC,IAAIC,EACAC,EAGJ,IAAMD,EAAIH,EAAM,EAAGG,GAAK,IACvBC,GAAMF,EAAKC,GAAM,GAAMF,EAAOE,GAC9BD,EAAKC,GAAMC,IAGNA,EAAI,IALiBD,KAS3B,OAAOD,CACR,CA8CA,SAASG,EAAeC,GACvB,IAAIC,EACAN,EACAD,EACAQ,EACAC,EACAC,EACAR,EACAS,EACAC,EACAC,EACAV,EAEJ,IAAMW,EAAeR,GACpB,MAAM,IAAIS,UAAWC,EAAQ,YAAaV,IAK3C,GAHAE,EAAO,CACNS,UAAY,GAERC,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNb,EAAUW,UAAW,IAEpB,MAAM,IAAIH,UAAWC,EAAQ,YAAaT,IAE3C,GAAKc,EAAYd,EAAS,YAAe,CACxC,IAAMe,EAAWf,EAAQgB,UACxB,MAAM,IAAIR,UAAWC,EAAQ,YAAa,WAAYT,EAAQgB,WAE/Df,EAAKS,UAAYV,EAAQgB,QACzB,CACD,CAMD,GAJAtB,EAAQK,EAAEL,OACVD,EAAQC,EAAMkB,QAGD,EACZ,MAAM,IAAIJ,UAAW,uFA8BtB,OA1BW,KADXF,EAAIW,EAAOvB,MAEVS,GAAM,GAGPG,GAAKZ,EAAOD,EAAM,GAElBY,EAAKX,EADLU,EAAMX,EAAQ,GAIdG,GAAK,GAGLD,EAAMuB,EAAOzB,IAGRA,EAAM,GAAM,KAIjB0B,EADAjB,EAAO,CAAA,EACY,OAAQkB,GAC3BD,EAAajB,EAAM,SAAUmB,GAGxBC,GACJH,EAAajB,EAAMoB,EAAgBC,GAE7BrB,EAQP,SAASkB,IACR,IAAII,EACA3B,EAEJ,OADAD,GAAK,EACAO,GAAOP,GAAKU,EACT,CACNmB,MAAQ,IAIVD,EAAIE,EAAWC,MAAO,KAAMhC,GAG5BE,GAAMF,EAAKS,GAAQ,GAAMC,EACzBV,EAAKS,GAAQP,EACF,IAANA,GAEJL,EAAkBC,EAAOC,EAAOC,GAG1B,CACNiC,MAASC,EAAO9B,EAAGyB,GAAG,EAAMvB,EAAKS,UACjCe,MAAQ,GAET,CASD,SAASJ,EAAKO,GAEb,OADAzB,GAAM,EACDQ,UAAUC,OACP,CACNgB,MAASA,EACTH,MAAQ,GAGH,CACNA,MAAQ,EAET,CAQD,SAASF,IACR,OAAOzB,EAAeC,EAAGE,EACzB,CACF"}